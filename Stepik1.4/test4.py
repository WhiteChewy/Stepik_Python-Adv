"""
Задача:

Реализовать программу которая будет эмулировать работу с пространствами имен.
Необходимо реализовать поддержку создания пространств имен и добавление в них переменных

В данной задаче у каждого пространства имен есть уникальный тестовый идентификатор - его имя

Вашей программе на вход подаются следующие запросы:

create <namespace> <parent> - создать новове пространство имен с именем <namespace> внутри
                              пространства <parent>.
add <namespace> <var> - добавить в пространство <namespace> переменную <var>

get <namespace> <var> - получить имя пространства, из которого будет взята перменная <var>
                        при запросе из пространства <namespace>, или None, если такого
                        пространства не существует

ВХОДНЫЕ ДАННЫЕ
первая строчка - число n(1 <= n <= 100) - число запросов
далее идут запросы. выполнение запросов происходит в порядке в которомони указваются
имена пространства имен и имена переменных предстваляют из себя строки длинны не более 10,
состоящие из строчных латинских букв.

"""
size = int(input())

# имитация стека вызова в виде словаря. ключ - ПРОСТРАНСТВО ИМЕН, значения - первое - родительское
# пространство имен, далее имена переменных
scopes = dict()


def get(_namespace, _name):
    if _name in scopes[_namespace]:
        return _namespace
    elif name not in scopes[_namespace] and scopes[_namespace][0] == "None":
        return "None"
    else:
        return get(scopes[_namespace][0], _name)


scopes["global"] = ["None"]

for i in range(size):
    command, namespace, name = input().split()  # считывание запроса
    if command == "add":
        scopes[namespace].append(name)  # создать ключ - неймспейс в значение добавить переменную
    elif command == "create":
        scopes[namespace] = [name]
    elif command == "get":
        print(get(namespace, name))
